### Genscan API HTTP Requests
### Base URL: http://localhost:3333
###
### Authentication: Most endpoints require JWT Bearer token
### Include header: Authorization: Bearer <token>
###
### API Conventions:
### - Content-Type: application/json (except file uploads)
### - Timestamps: ISO 8601 format
### - Database fields: snake_case naming
### - Pagination: ?page=1&per_page=10
### - Sorting: ?sort_by=field&order=asc|desc
### - Search: ?search=term

### Variables (replace with actual values)
@baseUrl = http://localhost:3333
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTc1MjE5MDY4NywiZXhwIjoxNzUyMTkxNTg3fQ.mN5_LyaxP1nZ46wWjRFVVB26E-0FD9vXJ7J5JlkE8AE
@userId = 3
@roleId = 3
@familyTreeId = 550e8400-e29b-41d4-a716-446655440000
@personId = 550e8400-e29b-41d4-a716-446655440001
@importId = 550e8400-e29b-41d4-a716-446655440002

###############################################################################
### HEALTH ENDPOINTS
###############################################################################

### Get API Information
GET {{baseUrl}}/
Accept: application/json

### Health Check
GET {{baseUrl}}/api/v1/health
Accept: application/json

###############################################################################
### AUTHENTICATION ENDPOINTS
###############################################################################

### Sign In (Login)
# Returns access_token and refresh_token
POST {{baseUrl}}/api/v1/sessions/sign-in
Content-Type: application/json

{
  "uid": "john@example.com",
  "password": "password123"
}

### Sign In with Username
POST {{baseUrl}}/api/v1/sessions/sign-in
Content-Type: application/json

{
  "uid": "johndoe",
  "password": "password123"
}

### Sign Up (Register)
# Creates new user account and returns tokens
POST {{baseUrl}}/api/v1/sessions/sign-up
Content-Type: application/json

{
  "full_name": "John Doe",
  "email": "john@example.com",
  "username": "johndoe",
  "password": "password123",
  "password_confirmation": "password123"
}

### Sign Up (Minimal - without username)
POST {{baseUrl}}/api/v1/sessions/sign-up
Content-Type: application/json

{
  "full_name": "Jane Smith",
  "email": "jane@example.com",
  "password": "password123",
  "password_confirmation": "password123"
}

###############################################################################
### PROFILE ENDPOINTS (Requires Authentication)
###############################################################################

### Get Current User Profile
GET {{baseUrl}}/api/v1/me
Authorization: Bearer {{token}}
Accept: application/json

### Get Current User Permissions
GET {{baseUrl}}/api/v1/me/permissions
Authorization: Bearer {{token}}
Accept: application/json

### Get Current User Roles
GET {{baseUrl}}/api/v1/me/roles
Authorization: Bearer {{token}}
Accept: application/json

###############################################################################
### EMAIL VERIFICATION ENDPOINTS
###############################################################################

### Verify Email
# This endpoint is typically opened from a link in an email
GET {{baseUrl}}/api/v1/verify-email?token=VERIFICATION_TOKEN
Accept: application/json

### Resend Verification Email (Requires Authentication)
POST {{baseUrl}}/api/v1/resend-verification-email
Authorization: Bearer {{token}}
Accept: application/json

###############################################################################
### USER MANAGEMENT ENDPOINTS (Requires Authentication)
###############################################################################

### List Users
# Paginated list with search and sorting
GET {{baseUrl}}/api/v1/users
Authorization: Bearer {{token}}
Accept: application/json

### List Users with Pagination
GET {{baseUrl}}/api/v1/users?page=1&per_page=20
Authorization: Bearer {{token}}
Accept: application/json

### List Users with Sorting
GET {{baseUrl}}/api/v1/users?sort_by=created_at&order=desc
Authorization: Bearer {{token}}
Accept: application/json

### Search Users
GET {{baseUrl}}/api/v1/users?search=john
Authorization: Bearer {{token}}
Accept: application/json

### Get User by ID
GET {{baseUrl}}/api/v1/users/{{userId}}
Authorization: Bearer {{token}}
Accept: application/json

### Create User (Requires USER role)
POST {{baseUrl}}/api/v1/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "full_name": "New User",
  "email": "newuser@example.com",
  "username": "newuser",
  "password": "password123",
  "password_confirmation": "password123"
}

### Update User
# Note: email and username cannot be changed
PUT {{baseUrl}}/api/v1/users/{{userId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "full_name": "John Updated Doe"
}

### Update User Password
PUT {{baseUrl}}/api/v1/users/{{userId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "password": "newpassword123",
  "password_confirmation": "newpassword123"
}

### Delete User (Soft Delete)
DELETE {{baseUrl}}/api/v1/users/{{userId}}
Authorization: Bearer {{token}}

###############################################################################
### ROLE MANAGEMENT ENDPOINTS (Requires ADMIN or ROOT role)
###############################################################################

### List Roles
GET {{baseUrl}}/api/v1/admin/roles
Authorization: Bearer {{token}}
Accept: application/json

### List Roles with Pagination
GET {{baseUrl}}/api/v1/admin/roles?page=1&per_page=10
Authorization: Bearer {{token}}
Accept: application/json

### Attach Roles to User
PUT {{baseUrl}}/api/v1/admin/roles/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "user_id": 1,
  "role_ids": [
    1,
    2,
    3
  ]
}

### Attach Single Role to User
PUT {{baseUrl}}/api/v1/admin/roles/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "user_id": 2,
  "role_ids": [
    2
  ]
}

###############################################################################
### PERMISSION MANAGEMENT ENDPOINTS (Requires ADMIN or ROOT role)
###############################################################################

### List Permissions
GET {{baseUrl}}/api/v1/admin/permissions
Authorization: Bearer {{token}}
Accept: application/json

### Create Permission
POST {{baseUrl}}/api/v1/admin/permissions
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "resource": "posts",
  "action": "create",
  "description": "Allow creating posts"
}

### Sync Role Permissions
PUT {{baseUrl}}/api/v1/admin/roles/permissions/sync
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "role_id": 2,
  "permission_ids": [
    1,
    2,
    3
  ]
}

### Attach Permissions to Role
PUT {{baseUrl}}/api/v1/admin/roles/permissions/attach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "role_id": 2,
  "permission_ids": [
    4,
    5
  ]
}

### Detach Permissions from Role
PUT {{baseUrl}}/api/v1/admin/roles/permissions/detach
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "role_id": 2,
  "permission_ids": [
    1
  ]
}

### Sync User Direct Permissions
PUT {{baseUrl}}/api/v1/admin/users/permissions/sync
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "user_id": 3,
  "permission_ids": [
    10,
    11
  ]
}

### Get User's Direct Permissions
GET {{baseUrl}}/api/v1/admin/users/{{userId}}/permissions
Authorization: Bearer {{token}}
Accept: application/json

### Check User Permissions
POST {{baseUrl}}/api/v1/admin/users/{{userId}}/permissions/check
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "permissions": [
    "users.create",
    "files.delete"
  ]
}

###############################################################################
### FILE MANAGEMENT ENDPOINTS (Requires Authentication)
###############################################################################

### Upload File
# Maximum size: 5MB
# Allowed extensions: jpeg, jpg, png, pdf, doc, docx, txt, csv, xls, xlsx, mp3, mp4, zip
# File is automatically categorized: image, document, video, audio, file
POST {{baseUrl}}/api/v1/files/upload
Authorization: Bearer {{token}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="file"; filename="document.pdf"
Content-Type: application/pdf

< ./document.pdf
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### Upload Image
POST {{baseUrl}}/api/v1/files/upload
Authorization: Bearer {{token}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="file"; filename="photo.jpg"
Content-Type: image/jpeg

< ./photo.jpg
------WebKitFormBoundary7MA4YWxkTrZu0gW--

###############################################################################
### FAMILY TREE MANAGEMENT ENDPOINTS (Requires Authentication)
###############################################################################

### List Family Trees
GET {{baseUrl}}/api/v1/family-trees
Authorization: Bearer {{token}}
Accept: application/json

### List Family Trees with Pagination
GET {{baseUrl}}/api/v1/family-trees?page=1&per_page=10
Authorization: Bearer {{token}}
Accept: application/json

### Search Family Trees
GET {{baseUrl}}/api/v1/family-trees?search=silva
Authorization: Bearer {{token}}
Accept: application/json

### Get Family Tree by ID
GET {{baseUrl}}/api/v1/family-trees/{{familyTreeId}}
Authorization: Bearer {{token}}
Accept: application/json

### Create Family Tree
POST {{baseUrl}}/api/v1/family-trees
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Silva Family Tree",
  "description": "Family tree of the Silva family from SÃ£o Paulo",
  "privacy": "private",
  "settings": {
    "theme": "light",
    "default_view": "tree"
  }
}

### Update Family Tree
PUT {{baseUrl}}/api/v1/family-trees/{{familyTreeId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Updated Silva Family Tree",
  "description": "Updated description",
  "privacy": "family"
}

### Delete Family Tree
DELETE {{baseUrl}}/api/v1/family-trees/{{familyTreeId}}
Authorization: Bearer {{token}}

###############################################################################
### PEOPLE MANAGEMENT ENDPOINTS (Requires Authentication)
###############################################################################

### List People
GET {{baseUrl}}/api/v1/people
Authorization: Bearer {{token}}
Accept: application/json

### List People with Pagination
GET {{baseUrl}}/api/v1/people?page=1&per_page=20
Authorization: Bearer {{token}}
Accept: application/json

### Search People by Name
GET {{baseUrl}}/api/v1/people?search=joÃ£o
Authorization: Bearer {{token}}
Accept: application/json

### Get Person by ID
GET {{baseUrl}}/api/v1/people/{{personId}}
Authorization: Bearer {{token}}
Accept: application/json

### Create Person
POST {{baseUrl}}/api/v1/people
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "full_name": "JoÃ£o Silva",
  "national_id": "12345678901",
  "birth_date": "1980-01-15",
  "birth_place": "SÃ£o Paulo, SP",
  "gender": "male"
}

### Update Person
PUT {{baseUrl}}/api/v1/people/{{personId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "full_name": "JoÃ£o Silva Santos",
  "birth_date": "1980-01-15",
  "death_date": "2023-12-01",
  "death_place": "Rio de Janeiro, RJ"
}

###############################################################################
### SEARCH ENDPOINTS (Requires Authentication)
###############################################################################

### Search People by Name
GET {{baseUrl}}/api/v1/people/search?name=joÃ£o
Authorization: Bearer {{token}}
Accept: application/json

### Search People by Name with Pagination
GET {{baseUrl}}/api/v1/people/search?name=silva&page=1&per_page=50
Authorization: Bearer {{token}}
Accept: application/json

### Search by Mother Name (External API)
GET {{baseUrl}}/api/v1/people/search/mother?mother_name=maria+silva
Authorization: Bearer {{token}}
Accept: application/json

### Search by Mother Name with Limit
GET {{baseUrl}}/api/v1/people/search/mother?mother_name=maria+silva&limit=20
Authorization: Bearer {{token}}
Accept: application/json

### Search by CPF (External API)
GET {{baseUrl}}/api/v1/people/search/cpf?cpf=12345678901
Authorization: Bearer {{token}}
Accept: application/json

###############################################################################
### IMPORT ENDPOINTS (Requires Authentication)
###############################################################################

### Import Person from CPF
# Imports person data and relatives from Brazilian API
POST {{baseUrl}}/api/v1/imports/cpf
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "cpf": "12345678901",
  "family_tree_id": "{{familyTreeId}}",
  "import_relatives": true,
  "merge_duplicates": true
}

### Import from CPF (Without Relatives)
POST {{baseUrl}}/api/v1/imports/cpf
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "cpf": "98765432109",
  "family_tree_id": "{{familyTreeId}}",
  "import_relatives": false
}

### Import People by Mother Name
# Imports multiple people found by mother name search
POST {{baseUrl}}/api/v1/imports/mother-name
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "mother_name": "Maria da Silva",
  "family_tree_id": "{{familyTreeId}}",
  "limit": 10,
  "merge_duplicates": true
}

### Import Full Genealogy Tree (Async)
# Imports complete family tree recursively - queued for background processing
POST {{baseUrl}}/api/v1/imports/full-tree
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "cpf": "12345678901",
  "family_tree_id": "{{familyTreeId}}",
  "max_depth": 3,
  "max_people": 500,
  "merge_duplicates": true
}

### Import Full Tree with Custom Limits
POST {{baseUrl}}/api/v1/imports/full-tree
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "cpf": "12345678901",
  "family_tree_id": "{{familyTreeId}}",
  "max_depth": 5,
  "max_people": 1000
}

### Check Import Status
GET {{baseUrl}}/api/v1/imports/{{importId}}/status
Authorization: Bearer {{token}}
Accept: application/json

###############################################################################
### EXAMPLE RESPONSES
###############################################################################

### Success Response - User Object
# {
#   "id": 1,
#   "full_name": "John Doe",
#   "email": "john@example.com",
#   "username": "johndoe",
#   "created_at": "2024-01-01T00:00:00.000Z",
#   "updated_at": "2024-01-01T00:00:00.000Z",
#   "roles": [
#     {
#       "id": 1,
#       "name": "User",
#       "description": "Regular user role",
#       "slug": "user",
#       "created_at": "2024-01-01T00:00:00.000Z",
#       "updated_at": "2024-01-01T00:00:00.000Z"
#     }
#   ]
# }

### Success Response - Auth Response
# {
#   "id": 1,
#   "full_name": "John Doe",
#   "email": "john@example.com",
#   "username": "johndoe",
#   "created_at": "2024-01-01T00:00:00.000Z",
#   "updated_at": "2024-01-01T00:00:00.000Z",
#   "roles": [...],
#   "auth": {
#     "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
#     "refresh_token": "refresh_token_string"
#   }
# }

### Success Response - Paginated List
# {
#   "meta": {
#     "total": 100,
#     "per_page": 10,
#     "current_page": 1,
#     "last_page": 10,
#     "first_page": 1,
#     "first_page_url": "/?page=1",
#     "last_page_url": "/?page=10",
#     "next_page_url": "/?page=2",
#     "previous_page_url": null
#   },
#   "data": [...]
# }

### Success Response - File Upload
# {
#   "url": "https://storage.example.com/files/abc123.pdf",
#   "client_name": "document.pdf",
#   "file_category": "document",
#   "file_type": "application/pdf",
#   "size": 12345,
#   "extname": "pdf"
# }

### Error Response - Validation Error
# {
#   "errors": [
#     {
#       "message": "The email field must be a valid email",
#       "field": "email",
#       "rule": "email"
#     }
#   ]
# }

### Error Response - Unauthorized
# {
#   "errors": [
#     {
#       "message": "Unauthorized"
#     }
#   ]
# }

### Error Response - Not Found
# {
#   "errors": [
#     {
#       "message": "Resource not found"
#     }
#   ]
# }

### Success Response - Family Tree
# {
#   "id": "550e8400-e29b-41d4-a716-446655440000",
#   "name": "Silva Family Tree",
#   "description": "Family tree of the Silva family from SÃ£o Paulo",
#   "owner_id": 1,
#   "privacy": "private",
#   "settings": {
#     "theme": "light",
#     "default_view": "tree"
#   },
#   "created_at": "2024-01-01T00:00:00.000Z",
#   "updated_at": "2024-01-01T00:00:00.000Z"
# }

### Success Response - Person
# {
#   "id": "550e8400-e29b-41d4-a716-446655440001",
#   "full_name": "JoÃ£o Silva",
#   "national_id": "12345678901",
#   "birth_date": "1980-01-15",
#   "death_date": null,
#   "birth_place": "SÃ£o Paulo, SP",
#   "death_place": null,
#   "gender": "male",
#   "created_by": 1,
#   "created_at": "2024-01-01T00:00:00.000Z",
#   "updated_at": "2024-01-01T00:00:00.000Z"
# }

### Success Response - Import Result
# {
#   "import_id": "550e8400-e29b-41d4-a716-446655440002",
#   "status": "success",
#   "persons_created": 15,
#   "relationships_created": 28,
#   "persons_updated": 3,
#   "duplicates_found": 2,
#   "errors": []
# }

### Success Response - Import Queued (Full Tree)
# {
#   "import_id": "550e8400-e29b-41d4-a716-446655440002",
#   "status": "queued",
#   "message": "Import job queued successfully. Use import_id 550e8400-e29b-41d4-a716-446655440002 to check status."
# }

### Success Response - Import Status
# {
#   "id": "550e8400-e29b-41d4-a716-446655440002",
#   "status": "processing",
#   "persons_created": 45,
#   "relationships_created": 89,
#   "persons_updated": 12,
#   "duplicates_found": 5,
#   "error_message": null,
#   "import_summary": {
#     "total_levels": 3,
#     "tree_structure": [...]
#   },
#   "created_at": "2024-01-01T00:00:00.000Z",
#   "completed_at": null
# }

### Success Response - Search by Mother Name
# [
#   {
#     "name": "JoÃ£o Silva Santos",
#     "cpf": "12345678901",
#     "mother_name": "Maria da Silva",
#     "birth_date": "1980-01-15"
#   },
#   {
#     "name": "JosÃ© Silva",
#     "cpf": "98765432109",
#     "mother_name": "Maria da Silva",
#     "birth_date": "1982-03-20"
#   }
# ]

### Success Response - Search by CPF
# {
#   "name": "JoÃ£o Silva Santos",
#   "cpf": "12345678901",
#   "birth_date": "1980-01-15",
#   "mother_name": "Maria da Silva",
#   "father_name": "JosÃ© Santos",
#   "gender": "M",
#   "birth_place": "SÃ£o Paulo, SP"
# }
